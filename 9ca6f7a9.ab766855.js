(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return g})),n.d(t,"metadata",(function(){return j})),n.d(t,"rightToc",(function(){return O})),n.d(t,"default",(function(){return w}));var a=n(2),i=n(6),s=n(0),r=n.n(s),o=n(100),l=n(112),u=n(98),c=n(80),b=n.n(c);const d=37,p=39;var m=function(e){const{block:t,children:n,defaultValue:a,values:i,groupId:o}=e,{tabGroupChoices:c,setTabGroupChoices:m}=Object(l.a)(),[h,g]=Object(s.useState)(a),[j,O]=Object(s.useState)(!1);if(null!=o){const e=c[o];null!=e&&e!==h&&i.some((t=>t.value===e))&&g(e)}const f=e=>{g(e),null!=o&&m(o,e)},w=[],v=e=>{e.metaKey||e.altKey||e.ctrlKey||O(!0)},y=()=>{O(!1)};return Object(s.useEffect)((()=>{window.addEventListener("keydown",v),window.addEventListener("mousedown",y)}),[]),r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(u.a)("tabs",{"tabs--block":t})},i.map((({value:e,label:t})=>r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":h===e,className:Object(u.a)("tabs__item",b.a.tabItem,{"tabs__item--active":h===e}),style:j?{}:{outline:"none"},key:e,ref:e=>w.push(e),onKeyDown:e=>{((e,t,n)=>{switch(n.keyCode){case p:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case d:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(w,e.target,e),v(e)},onFocus:()=>f(e),onClick:()=>{f(e),O(!1)},onPointerDown:()=>O(!1)},t)))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},s.Children.toArray(n).filter((e=>e.props.value===h))[0]))};var h=function(e){return r.a.createElement("div",null,e.children)},g={id:"GuessingGame",title:"The Guessing game",sidebar_label:"Variables and IO",description:"A simple game like program to demonstrate the concepts of variable in Rust",keywords:["introduction","basic","rust","Guessing","game"]},j={unversionedId:"GuessingGame",id:"GuessingGame",isDocsHomePage:!1,title:"The Guessing game",description:"A simple game like program to demonstrate the concepts of variable in Rust",source:"@site/docs\\GuessinGame.md",slug:"/GuessingGame",permalink:"/rust-doc/docs/GuessingGame",editUrl:"https://github.com/karan-vk/rust-doc/edit/master/docs/GuessinGame.md",version:"current",sidebar_label:"Variables and IO",sidebar:"someSidebar",previous:{title:"Get Started",permalink:"/rust-doc/docs/"}},O=[{value:"Prelude",id:"prelude",children:[]},{value:"Creating a new Cargo project",id:"creating-a-new-cargo-project",children:[]},{value:"Shall we begin",id:"shall-we-begin",children:[]},{value:"Code explanation",id:"code-explanation",children:[{value:"The <code>import</code> of Rust",id:"the-import-of-rust",children:[]},{value:"The function declaration",id:"the-function-declaration",children:[]},{value:"The declaration \u2696",id:"the-declaration-",children:[]},{value:"Handling errors \ud83d\udc1e",id:"handling-errors-",children:[]},{value:"Printing the values \ud83d\udda8",id:"printing-the-values-",children:[]},{value:"Let&#39;s run it \ud83d\udca8",id:"lets-run-it-",children:[]}]},{value:"Mutablity and immutablity",id:"mutablity-and-immutablity",children:[]}],f={rightToc:O};function w(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},f,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"prelude"},"Prelude"),Object(o.b)("p",null,"Unlike a lot of programing languages like Javascript or Python Rust is a statically typed language"),Object(o.b)("p",null,"Avariable is declared as follows:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"let foo = bar\n")),Object(o.b)("p",null,"If many are familiar with JavaScript this looks like a mutable variable but it is not this is anon mutable constant\nThis line creates a new variable named ",Object(o.b)("inlineCode",{parentName:"p"},"foo")," and binds it to the value of the ",Object(o.b)("inlineCode",{parentName:"p"},"bar")," variable. In Rust, variables are immutable by default"),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Note: The ",Object(o.b)("inlineCode",{parentName:"p"},"//")," syntax starts a comment that continues until the end of the line. Rust ignores everything in comments"))),Object(o.b)("p",null,"So let kick on with a program"),Object(o.b)("h2",{id:"creating-a-new-cargo-project"},"Creating a new Cargo project"),Object(o.b)("p",null,"A new cargo project can be created by running the following command"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cargo new guessing_game\n")),Object(o.b)("p",null,"This creates a folder with a ",Object(o.b)("inlineCode",{parentName:"p"},"Cargo.toml")," file where all the versioning and dependancies are managed"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml",metastring:'title="Cargo.toml"',title:'"Cargo.toml"'}),'[package]\nname = "guessing_game"\nversion = "0.1.0"\nauthors = ["Karan <karanvknarayanan@gmail.com>"]\nedition = "2018"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n\n')),Object(o.b)("h2",{id:"shall-we-begin"},"Shall we begin"),Object(o.b)("p",null,"Now let's start writing some code \ud83d\udc69\u200d\ud83d\udcbb"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'use std::io;\n\nfn main() {\n    let mut guess = String::new();\n    io::stdin().read_line(&mut guess).expect("failed to read the line");\n    println!("your guess is {}", guess);\n}\n')),Object(o.b)("h2",{id:"code-explanation"},"Code explanation"),Object(o.b)("p",null,"Let's dive deep"),Object(o.b)("h3",{id:"the-import-of-rust"},"The ",Object(o.b)("inlineCode",{parentName:"h3"},"import")," of Rust"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust",metastring:"{1}","{1}":!0}),'use std::io;\n\nfn main() {\n    let mut guess = String::new();\n    io::stdin().read_line(&mut guess).expect("failed to read the line");\n    println!("your guess is {}", guess);\n}\n')),Object(o.b)("p",null,"The above highlighted line is used to import the standard package io for reading the inputs provided by the user.\nThe rust lang proviis a lot of standard packages for better prototyping hence increasing productivity"),Object(o.b)("h3",{id:"the-function-declaration"},"The function declaration"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust",metastring:"{3,7}","{3,7}":!0}),'use std::io;\n\nfn main() {\n    let mut guess = String::new();\n    io::stdin().read_line(&mut guess).expect("failed to read the line");\n    println!("your guess is {}", guess);\n}\n')),Object(o.b)("p",null,"please focus on the highghted lines"),Object(o.b)("p",null,"A function can be declared by using ",Object(o.b)("inlineCode",{parentName:"p"},"fn")," key word."),Object(o.b)("p",null,"For every rust program must ",Object(o.b)("inlineCode",{parentName:"p"},"main()")," as the entry point without the program fails to run.The key word ",Object(o.b)("inlineCode",{parentName:"p"},"main")," is reserved but the rust lang so ",Object(o.b)("inlineCode",{parentName:"p"},"main")," key word ",Object(o.b)("strong",{parentName:"p"},"cannot be used to define another function")," in a rust program program."),Object(o.b)("h3",{id:"the-declaration-"},"The declaration \u2696"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust",metastring:"{4}","{4}":!0}),'use std::io;\n\nfn main() {\n    let mut guess = String::new();\n    io::stdin().read_line(&mut guess).expect("failed to read the line");\n    println!("your guess is {}", guess);\n}\n')),Object(o.b)("p",null,"Let\u2019s return to the guessing game program. You now know that let mut ",Object(o.b)("inlineCode",{parentName:"p"},"guess")," will introduce a mutable variable named ",Object(o.b)("inlineCode",{parentName:"p"},"guess"),". On the other side of the equal sign (=) is the value that ",Object(o.b)("inlineCode",{parentName:"p"},"guess")," is bound to, which is the result of calling ",Object(o.b)("inlineCode",{parentName:"p"},"String::new"),", a function that returns a new instance of a String. ",Object(o.b)("inlineCode",{parentName:"p"},"String")," is a string type provided by the standard library that is a growable, UTF-8 encoded bit of text."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"::")," syntax in the ",Object(o.b)("inlineCode",{parentName:"p"},"::new")," line indicates that new is an associated function of the String type. An associated function is implemented on a type, in this case String, rather than on a particular instance of a String. Some languages call this a static method."),Object(o.b)("p",null,"This new function creates a new, empty string. You\u2019ll find a new function on many types, because it\u2019s a common name for a function that makes a new value of some kind."),Object(o.b)("p",null,"To summarize, the ",Object(o.b)("inlineCode",{parentName:"p"},"let mut guess = String::new();")," line has created a mutable variable that is currently bound to a new, empty instance of a String."),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://media.tenor.com/images/d80affe338b6e5b942b1b3ad0909573e/tenor.gif"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://media.tenor.com/images/d80affe338b6e5b942b1b3ad0909573e/tenor.gif",alt:null})))),Object(o.b)("p",null,"Recall that we included the input/output functionality from the standard library with use std::io; on the first line of the program. Now we\u2019ll call the stdin function from the io module:"),Object(o.b)("p",null,"Recall that we included the input/output functionality from the standard library with use std::io; on the first line of the program. Now we\u2019ll call the stdin function from the io module:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"io::stdin()\n        .read_line(&mut guess)\n")),Object(o.b)("p",null,"If we hadn\u2019t put the use ",Object(o.b)("inlineCode",{parentName:"p"},"std::io")," line at the beginning of the program, we could have written this function call as ",Object(o.b)("inlineCode",{parentName:"p"},"std::io::stdin"),". The stdin function returns an instance of ",Object(o.b)("inlineCode",{parentName:"p"},"std::io::stdin"),", which is a type that represents a handle to the standard input for your terminal."),Object(o.b)("p",null,"The next part of the code, ",Object(o.b)("inlineCode",{parentName:"p"},".read_line(&mut guess)"),", calls the ",Object(o.b)("inlineCode",{parentName:"p"},"read_line")," method on the standard input handle to get input from the user. We\u2019re also passing one argument to ",Object(o.b)("inlineCode",{parentName:"p"},"read_line: &mut guess"),"."),Object(o.b)("p",null,"The job of ",Object(o.b)("inlineCode",{parentName:"p"},"read_line")," is to take whatever the user types into standard input and place that into a string, so it takes that string as an argument. The string argument needs to be mutable so the method can change the string\u2019s content by adding the user input."),Object(o.b)("p",null,"The & indicates that this argument is a reference, which gives you a way to let multiple parts of your code access one piece of data without needing to copy that data into memory multiple times. References are a complex feature, and one of Rust\u2019s major advantages is how safe and easy it is to use references. You don\u2019t need to know a lot of those details to finish this program. For now, all you need to know is that like variables, references are immutable by default. Hence, you need to write ",Object(o.b)("inlineCode",{parentName:"p"},"&mut guess")," rather than ",Object(o.b)("inlineCode",{parentName:"p"},"&guess")," to make it ",Object(o.b)("strong",{parentName:"p"},"mutable"),"."),Object(o.b)("h3",{id:"handling-errors-"},"Handling errors \ud83d\udc1e"),Object(o.b)("p",null,"We\u2019re still working on this line of code. Although we\u2019re now discussing a third line of text, it\u2019s still part of a single logical line of code. The next part is this method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust",metastring:"{2}","{2}":!0}),"io::stdin()\n        .read_line(&mut guess)\n")),Object(o.b)("p",null,"When you call a method with the .foo() syntax, it\u2019s often wise to introduce a newline and other whitespace to help break up long lines. We could have written this code as:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'io::stdin().read_line(&mut guess).expect("Failed to read line");\n\n')),Object(o.b)("p",null,"However, one long line is difficult to read, so it\u2019s best to divide it. Now let\u2019s discuss what this line does."),Object(o.b)("p",null,"As mentioned earlier, ",Object(o.b)("inlineCode",{parentName:"p"},"read_line")," puts what the user types into the string we\u2019re passing it, but it also returns a value\u2014in this case, an ",Object(o.b)("inlineCode",{parentName:"p"},"io::Result"),". Rust has a number of types named ",Object(o.b)("inlineCode",{parentName:"p"},"Result")," in its standard library: a generic ",Object(o.b)("inlineCode",{parentName:"p"},"Result")," as well as specific versions for submodules, such as ",Object(o.b)("inlineCode",{parentName:"p"},"io::Result"),"."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"Result")," types are enumerations, often referred to as enums. An enumeration is a type that can have a fixed set of values, and those values are called the enum\u2019s variants. Chapter 6 will cover enums in more detail."),Object(o.b)("p",null,"For ",Object(o.b)("inlineCode",{parentName:"p"},"Result"),", the variants are Ok or Err. The Ok variant indicates the operation was successful, and inside Ok is the successfully generated value. The Err variant means the operation failed, and Err contains information about how or why the operation failed."),Object(o.b)("p",null,"The purpose of these ",Object(o.b)("inlineCode",{parentName:"p"},"Result")," types is to encode error-handling information. Values of the ",Object(o.b)("inlineCode",{parentName:"p"},"Result")," type, like values of any type, have methods defined on them. An instance of ",Object(o.b)("inlineCode",{parentName:"p"},"io::Result")," has an expect method that you can call. If this instance of ",Object(o.b)("inlineCode",{parentName:"p"},"io::Result")," is an Err value, expect will cause the program to crash and display the message that you passed as an argument to expect. If the ",Object(o.b)("inlineCode",{parentName:"p"},"read_line")," method returns an Err, it would likely be the result of an error coming from the underlying operating system. If this instance of ",Object(o.b)("inlineCode",{parentName:"p"},"io::Result")," is an Ok value, expect will take the return value that Ok is holding and return just that value to you so you can use it. In this case, that value is the number of bytes in what the user entered into standard input."),Object(o.b)("p",null,"If you don\u2019t call expect, the program will compile, but you\u2019ll get a warning:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"\n$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\nwarning: unused `std::result::Result` that must be used\n  --\x3e src/main.rs:10:5\n   |\n10 |     io::stdin().read_line(&mut guess);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_must_use)]` on by default\n   = note: this `Result` may be an `Err` variant, which should be handled\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.09s\n\n")),Object(o.b)("p",null,"Rust warns that you haven\u2019t used the Result value returned from ",Object(o.b)("inlineCode",{parentName:"p"},"read_line"),", indicating that the program hasn\u2019t handled a possible error."),Object(o.b)("p",null,"The right way to suppress the warning is to actually write error handling, but because you just want to crash this program when a problem occurs, you can use ",Object(o.b)("inlineCode",{parentName:"p"},"expect"),"."),Object(o.b)("h3",{id:"printing-the-values-"},"Printing the values \ud83d\udda8"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'println!("You guessed: {}", guess);\n')),Object(o.b)("p",null,"This line prints the string we saved the user\u2019s input in. The set of curly brackets, ",Object(o.b)("inlineCode",{parentName:"p"},"{}"),", is a placeholder: think of ",Object(o.b)("inlineCode",{parentName:"p"},"{}")," as little crab pincers that hold a value in place. You can print more than one value using curly brackets: the first set of curly brackets holds the first value listed after the format string, the second set holds the second value, and so on."),Object(o.b)("h3",{id:"lets-run-it-"},"Let's run it \ud83d\udca8"),Object(o.b)("p",null,"Let\u2019s test the first part of the guessing game. Run it using ",Object(o.b)("inlineCode",{parentName:"p"},"cargo run"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.44s\n     Running `target/debug/guessing_game`\nGuess the number!\nPlease input your guess.\n5\nYou guessed: 5\n")),Object(o.b)("p",null,"At this point, the first part of the game is done: we\u2019re getting input from the keyboard and then printing it."),Object(o.b)("h2",{id:"mutablity-and-immutablity"},"Mutablity and immutablity"),Object(o.b)("p",null,"By default in ",Object(o.b)("strong",{parentName:"p"},"Rust")," the values are ",Object(o.b)("strong",{parentName:"p"},"immutable"),".\nThis will be discussed in the later in the week."),Object(o.b)(m,{defaultValue:"non",values:[{label:"Immutablity",value:"non"},{label:"Mutablity",value:"mut"}],mdxType:"Tabs"},Object(o.b)(h,{value:"non",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"let foo = bar\n"))),Object(o.b)(h,{value:"mut",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"let mut foo =bar\n")))),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://media.giphy.com/media/LFEjnqmVmbKk8/giphy.gif"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://media.giphy.com/media/LFEjnqmVmbKk8/giphy.gif",alt:null})))))}w.isMDXComponent=!0}}]);